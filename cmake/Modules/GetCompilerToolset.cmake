
##
## See: https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html#variable:CMAKE_%3CLANG%3E_COMPILER_ID
##
function (get_compiler_id LANG_COMPILER_ID)
    if ("${LANG_COMPILER_ID}" STREQUAL "GNU")
        set(${LANG_COMPILER_ID} "gcc" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "TinyCC")
        set(${LANG_COMPILER_ID} "tcc" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "clang")
        set(${LANG_COMPILER_ID} "clang" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "AppleClang")
        set(${LANG_COMPILER_ID} "apple-clang" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "Intel")
        set(${LANG_COMPILER_ID} "icc" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "IntelLLVM")
        set(${LANG_COMPILER_ID} "intel-llvm" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "ARMCC")
        set(${LANG_COMPILER_ID} "arm-gcc" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "ARMClang ")
        set(${LANG_COMPILER_ID} "arm-clang" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "NVIDIA ")
        set(${LANG_COMPILER_ID} "nVidia" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "NVHPC ")
        set(${LANG_COMPILER_ID} "nvHPC" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "SunPro")
        set(${LANG_COMPILER_ID} "sun-pro" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "OpenWatcom")
        set(${LANG_COMPILER_ID} "watcom" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "G95")
        set(${LANG_COMPILER_ID} "g95-fortran" PARENT_SCOPE)
    elseif ("${LANG_COMPILER_ID}" STREQUAL "MSVC")
        set(${LANG_COMPILER_ID} "msvc" PARENT_SCOPE)
    else()
        set(${LANG_COMPILER_ID} "${LANG_COMPILER_ID}" PARENT_SCOPE)
    endif()
endfunction(get_compiler_id)

function (get_c_compiler_id LANG_COMPILER_ID)
    set(LANG_COMPILER_ID "${CMAKE_C_COMPILER_ID}")
    get_compiler_id(LANG_COMPILER_ID)
endfunction(get_c_compiler_id)

function (get_cxx_compiler_id LANG_COMPILER_ID)
    set(LANG_COMPILER_ID "${CMAKE_CXX_COMPILER_ID}")
    get_compiler_id(LANG_COMPILER_ID)
endfunction(get_cxx_compiler_id)

function (get_lang_compiler_id LANG_COMPILER_ID LANG_ID)
    set(LOCAL_COMPILER_ID)
    if ((LANG_ID STREQUAL "cxx") OR (LANG_ID STREQUAL "cpp") OR (LANG_ID STREQUAL "cc"))
        get_cxx_compiler_id(LOCAL_COMPILER_ID)
    else()
        get_c_compiler_id(LOCAL_COMPILER_ID)
    endif()
    # message(STATUS "get_lang_compiler_id(): LOCAL_COMPILER_ID = ${LOCAL_COMPILER_ID}")
    set(${LANG_COMPILER_ID} "${LOCAL_COMPILER_ID}" PARENT_SCOPE)
endfunction(get_lang_compiler_id)

function (GetCompilerToolset TOOLSET LANG_ID)
    # message(STATUS "LANG_ID = ${LANG_ID}")
    set(LOCAL_COMPILER_ID)
    get_lang_compiler_id(LOCAL_COMPILER_ID ${LANG_ID})
    if (JLANG_CMAKE_SHOW_DETAIL)
        message(STATUS "LOCAL_COMPILER_ID = ${LOCAL_COMPILER_ID}")
    endif()
    if (MSVC_IDE)
        if (MSVC60)
            set(${TOOLSET} "vc60" PARENT_SCOPE)
        elseif (MSVC70)
            set(${TOOLSET} "vc2003" PARENT_SCOPE)
        elseif (MSVC71)
            set(${TOOLSET} "vc2003" PARENT_SCOPE)
        elseif (MSVC80)
            set(${TOOLSET} "vc2005" PARENT_SCOPE)
        elseif (CMAKE_COMPILER_2005)
            set(${TOOLSET} "vc2005" PARENT_SCOPE)
        elseif (MSVC90)
            set(${TOOLSET} "vc2008" PARENT_SCOPE)
        elseif (MSVC10)
            set(${TOOLSET} "vc2010" PARENT_SCOPE)
        elseif (MSVC11)
            set(${TOOLSET} "vc2012" PARENT_SCOPE)
        elseif (MSVC12)
            set(${TOOLSET} "vc2013" PARENT_SCOPE)
        elseif (MSVC13)
            set(${TOOLSET} "vc2014" PARENT_SCOPE)
        elseif (MSVC14)
            set(${TOOLSET} "vc2015" PARENT_SCOPE)
        elseif (MSVC15)
            set(${TOOLSET} "vc2017" PARENT_SCOPE)
        elseif (MSVC16)
            set(${TOOLSET} "vc2019" PARENT_SCOPE)
        elseif (MSVC17)
            set(${TOOLSET} "vc2022" PARENT_SCOPE)
        else()
            if (NOT LOCAL_COMPILER_ID STREQUAL "")
                set(${TOOLSET} "${LOCAL_COMPILER_ID}" PARENT_SCOPE)
            else()
                set(${TOOLSET} "msvc" PARENT_SCOPE)
            endif()
        endif()
    elseif (MINGW)
        if (NOT LOCAL_COMPILER_ID STREQUAL "")
            set(${TOOLSET} "mingw_${LOCAL_COMPILER_ID}" PARENT_SCOPE)
        else()
            set(${TOOLSET} "mingw" PARENT_SCOPE)
        endif()
    elseif (CYGWIN)
        if (NOT LOCAL_COMPILER_ID STREQUAL "")
            set(${TOOLSET} "cygwin_${LOCAL_COMPILER_ID}" PARENT_SCOPE)
        else()
            set(${TOOLSET} "cygwin" PARENT_SCOPE)
        endif()
    elseif (MSYS)
        if (NOT LOCAL_COMPILER_ID STREQUAL "")
            set(${TOOLSET} "msys_${LOCAL_COMPILER_ID}" PARENT_SCOPE)
        else()
            set(${TOOLSET} "msys" PARENT_SCOPE)
        endif()
    elseif (XCODE)
        if (NOT XCODE_VERSION STREQUAL "")
            set(${TOOLSET} "xcode_${XCODE_VERSION}" PARENT_SCOPE)
        else()
            set(${TOOLSET} "xcode" PARENT_SCOPE)
        endif()
    elseif (BORLAND)
        if (NOT LOCAL_COMPILER_ID STREQUAL "")
            set(${TOOLSET} "borland_${LOCAL_COMPILER_ID}" PARENT_SCOPE)
        else()
            set(${TOOLSET} "borland" PARENT_SCOPE)
        endif()
    elseif (WATCOM)
        if (NOT LOCAL_COMPILER_ID STREQUAL "")
            set(${TOOLSET} "watcom_${LOCAL_COMPILER_ID}" PARENT_SCOPE)
        else()
            set(${TOOLSET} "watcom" PARENT_SCOPE)
        endif()
    elseif (UNIX)
        if (NOT LOCAL_COMPILER_ID STREQUAL "")
            set(${TOOLSET} "${LOCAL_COMPILER_ID}" PARENT_SCOPE)
        else()
            set(${TOOLSET} "unix" PARENT_SCOPE)
        endif()
    else()
        if (NOT LOCAL_COMPILER_ID STREQUAL "")
            set(${TOOLSET} "${LOCAL_COMPILER_ID}" PARENT_SCOPE)
        else()
            set(${TOOLSET} "unknown" PARENT_SCOPE)
        endif()
    endif(MSVC_IDE)
endfunction(GetCompilerToolset)
